// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATAPACKAGE_NOAH_TASKS_H_
#define FLATBUFFERS_GENERATED_DATAPACKAGE_NOAH_TASKS_H_

#include "external/flatbuffers/flatbuffers.h"

namespace noah {
namespace tasks {

struct EncoderRequest;

struct EncoderResponse;

struct DataPackage;
struct DataPackageBuilder;

enum Side {
  Side_All = 0,
  Side_MIN = Side_All,
  Side_MAX = Side_All
};

inline const Side (&EnumValuesSide())[1] {
  static const Side values[] = {
    Side_All
  };
  return values;
}

inline const char * const *EnumNamesSide() {
  static const char * const names[2] = {
    "All",
    nullptr
  };
  return names;
}

inline const char *EnumNameSide(Side e) {
  if (flatbuffers::IsOutRange(e, Side_All, Side_All)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSide()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) EncoderRequest FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t side_;

 public:
  EncoderRequest() {
    memset(static_cast<void *>(this), 0, sizeof(EncoderRequest));
  }
  EncoderRequest(noah::tasks::Side _side)
      : side_(flatbuffers::EndianScalar(static_cast<int8_t>(_side))) {
  }
  noah::tasks::Side side() const {
    return static_cast<noah::tasks::Side>(flatbuffers::EndianScalar(side_));
  }
};
FLATBUFFERS_STRUCT_END(EncoderRequest, 1);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) EncoderResponse FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t ticks_l_;
  int16_t ticks_r_;

 public:
  EncoderResponse() {
    memset(static_cast<void *>(this), 0, sizeof(EncoderResponse));
  }
  EncoderResponse(int16_t _ticks_l, int16_t _ticks_r)
      : ticks_l_(flatbuffers::EndianScalar(_ticks_l)),
        ticks_r_(flatbuffers::EndianScalar(_ticks_r)) {
  }
  int16_t ticks_l() const {
    return flatbuffers::EndianScalar(ticks_l_);
  }
  int16_t ticks_r() const {
    return flatbuffers::EndianScalar(ticks_r_);
  }
};
FLATBUFFERS_STRUCT_END(EncoderResponse, 4);

struct DataPackage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataPackageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENCODERREQUEST = 4,
    VT_ENCODERRESPONSE = 6,
    VT_TARGETSPEEDLREQUEST = 8,
    VT_TARGETSPEEDRREQUEST = 10
  };
  const noah::tasks::EncoderRequest *encoderRequest() const {
    return GetStruct<const noah::tasks::EncoderRequest *>(VT_ENCODERREQUEST);
  }
  const noah::tasks::EncoderResponse *encoderResponse() const {
    return GetStruct<const noah::tasks::EncoderResponse *>(VT_ENCODERRESPONSE);
  }
  float targetSpeedLRequest() const {
    return GetField<float>(VT_TARGETSPEEDLREQUEST, 0.0f);
  }
  float targetSpeedRRequest() const {
    return GetField<float>(VT_TARGETSPEEDRREQUEST, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<noah::tasks::EncoderRequest>(verifier, VT_ENCODERREQUEST) &&
           VerifyField<noah::tasks::EncoderResponse>(verifier, VT_ENCODERRESPONSE) &&
           VerifyField<float>(verifier, VT_TARGETSPEEDLREQUEST) &&
           VerifyField<float>(verifier, VT_TARGETSPEEDRREQUEST) &&
           verifier.EndTable();
  }
};

struct DataPackageBuilder {
  typedef DataPackage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_encoderRequest(const noah::tasks::EncoderRequest *encoderRequest) {
    fbb_.AddStruct(DataPackage::VT_ENCODERREQUEST, encoderRequest);
  }
  void add_encoderResponse(const noah::tasks::EncoderResponse *encoderResponse) {
    fbb_.AddStruct(DataPackage::VT_ENCODERRESPONSE, encoderResponse);
  }
  void add_targetSpeedLRequest(float targetSpeedLRequest) {
    fbb_.AddElement<float>(DataPackage::VT_TARGETSPEEDLREQUEST, targetSpeedLRequest, 0.0f);
  }
  void add_targetSpeedRRequest(float targetSpeedRRequest) {
    fbb_.AddElement<float>(DataPackage::VT_TARGETSPEEDRREQUEST, targetSpeedRRequest, 0.0f);
  }
  explicit DataPackageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DataPackageBuilder &operator=(const DataPackageBuilder &);
  flatbuffers::Offset<DataPackage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataPackage>(end);
    return o;
  }
};

inline flatbuffers::Offset<DataPackage> CreateDataPackage(
    flatbuffers::FlatBufferBuilder &_fbb,
    const noah::tasks::EncoderRequest *encoderRequest = 0,
    const noah::tasks::EncoderResponse *encoderResponse = 0,
    float targetSpeedLRequest = 0.0f,
    float targetSpeedRRequest = 0.0f) {
  DataPackageBuilder builder_(_fbb);
  builder_.add_targetSpeedRRequest(targetSpeedRRequest);
  builder_.add_targetSpeedLRequest(targetSpeedLRequest);
  builder_.add_encoderResponse(encoderResponse);
  builder_.add_encoderRequest(encoderRequest);
  return builder_.Finish();
}

inline const noah::tasks::DataPackage *GetDataPackage(const void *buf) {
  return flatbuffers::GetRoot<noah::tasks::DataPackage>(buf);
}

inline const noah::tasks::DataPackage *GetSizePrefixedDataPackage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<noah::tasks::DataPackage>(buf);
}

inline bool VerifyDataPackageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<noah::tasks::DataPackage>(nullptr);
}

inline bool VerifySizePrefixedDataPackageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<noah::tasks::DataPackage>(nullptr);
}

inline void FinishDataPackageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<noah::tasks::DataPackage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataPackageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<noah::tasks::DataPackage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace tasks
}  // namespace noah

#endif  // FLATBUFFERS_GENERATED_DATAPACKAGE_NOAH_TASKS_H_
